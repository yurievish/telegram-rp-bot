from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN
from database import init_db
import asyncio
from aiohttp import web

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

init_db()

@dp.message_handler(commands=["nick"])
async def handle_nick(message: types.Message):
    if not message.reply_to_message:
        await message.reply("‚ö†Ô∏è –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
–©–æ–± –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏—Ç—É–ª, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    args = message.get_args().strip()
    if not args or "_" not in args:
        await message.reply("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!
–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/nick –Ü–º'—è_–ü—Ä—ñ–∑–≤–∏—â–µ</code>", parse_mode="HTML")
        return

    target_user = message.reply_to_message.from_user
    chat_id = message.chat.id

    try:
        await bot.promote_chat_member(
            chat_id=chat_id,
            user_id=target_user.id,
            can_manage_chat=False,
            can_change_info=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False
        )

        await asyncio.sleep(1.5)

        await bot.set_chat_administrator_custom_title(chat_id, target_user.id, args)
        await message.reply(f"‚úÖ –£—Å–ø—ñ—Ö!
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <b>{target_user.full_name}</b> –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–∏—Ç—É–ª: <code>{args}</code>", parse_mode="HTML")

    except Exception as e:
        if "USER_NOT_ADMIN" in str(e) or "not an administrator" in str(e):
            await message.reply("üõë –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏—Ç—É–ª!
Telegram –¥–æ–∑–≤–æ–ª—è—î —Ü–µ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å—Ç–∞—Ç—É—Å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif "CHAT_ADMIN_REQUIRED" in str(e) or "rights" in str(e):
            await message.reply("üîí –û–±–º–µ–∂–µ–Ω–Ω—è!
–ë–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–∏—Ç—É–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞.")
        else:
            await message.reply(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:
<code>{e}</code>", parse_mode="HTML")

# Health-check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="I am alive")

def start_health_server():
    app = web.Application()
    app.router.add_get('/', handle)
    web.run_app(app, port=8080)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(asyncio.to_thread(start_health_server))
    executor.start_polling(dp)
