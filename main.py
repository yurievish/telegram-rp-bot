from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN
from database import init_db
import asyncio
from aiohttp import web

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

init_db()

# === /nick ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–Ω—ñ–º–∞—î –≤ –∞–¥–º—ñ–Ω–∏ —ñ —Å—Ç–∞–≤–∏—Ç—å —Ç–∏—Ç—É–ª ===
@dp.message_handler(commands=["nick"])
async def handle_nick(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ö–æ–º—É —Ç–∏, –±–ª—è–¥—å, —Ö–æ—á–µ—à —Ç–∏—Ç—É–ª –≤–∏–¥–∞—Ç–∏? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞.")
        return

    args = message.get_args().strip()
    if not args or "_" not in args:
        await message.reply("–¶–µ –Ω–µ –Ω—ñ–∫, –∞ —Ö—É–π–Ω—è –∑ –ø—ñ–¥ –∫–æ–Ω—è. –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏: /nick –Ü–º—è_–ü—Ä—ñ–∑–≤–∏—â–µ")
        return

    target_user = message.reply_to_message.from_user
    chat_id = message.chat.id

    try:
        # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω–∏
        await bot.promote_chat_member(
            chat_id=chat_id,
            user_id=target_user.id,
            can_manage_chat=False,
            can_change_info=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False
        )

        # –°—Ç–∞–≤–∏–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–∏—Ç—É–ª
        await bot.set_chat_administrator_custom_title(chat_id, target_user.id, args)
        await message.reply(f"üö® –¢–µ–ø–µ—Ä {target_user.full_name} ‚Äî <code>{args}</code>!", parse_mode="HTML")

    except Exception as e:
        await message.reply(f"–ù—ñ—Ö—É—è –Ω–µ –≤–∏–π—à–ª–æ, –±–æ: {e}")

# === Health-check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="I am alive")

def start_health_server():
    app = web.Application()
    app.router.add_get('/', handle)
    web.run_app(app, port=8080)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(asyncio.to_thread(start_health_server))
    executor.start_polling(dp)
